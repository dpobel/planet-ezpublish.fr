#?ini charset="utf-8"?
# eZ publish configuration file for the eZ Online Editor



[EditorSettings]
# TinyMCE plugins you want to use
# plugins not mentioned here aren't tested and therefore not supported together with Online Editor
Plugins[]
Plugins[]=safari
Plugins[]=eztable
#Plugins[]=insertdatetime
#Plugins[]=visualchars
# Will currently store as whitespace, see issue #014370
#Plugins[]=nonbreaking
# Spellchecker Requirements:
# http://wiki.moxiecode.com/index.php/TinyMCE:Plugins/spellchecker
#Plugins[]=spellchecker
#Plugins[]=searchreplace
Plugins[]=paste
Plugins[]=fullscreen
Plugins[]=inlinepopups

# Skin for the editor, 'default' and 'o2k7' is included as standard
Skin=o2k7
# Included skin variants in the o2k7 skin is: 'silver' and 'black'
#SkinVariant=

# Turns on development mode:
# - disables js / css packer (for debugging apache rewrite rules)
DevelopmentMode=disabled

# Enables compatibility mode by making editor behave more like OE 4.x
# - uses attachment icon for embed relations, makes it easier to place embed objects inside text
#   but looses preview functionality. (name of embed object is shown if you hover the icon though)
CompatibilityMode=disabled

# Validates embed objects and gives a warning if it's in trash
ValidateEmbedObjects=disabled

# Makes it possible to get default TinyMCE behavior when clicking tag name by disabling
TagPathOpenDialog=enabled


# Map custom attribute names to style values so they are previewed in the editor.
# Supported styles are limited to the following types:
#     border* (so border or border-color will work)
#     margin*
#     padding*
#     width
#     height
CustomAttributeStyleMap[]
CustomAttributeStyleMap[width]=width
CustomAttributeStyleMap[height]=height
CustomAttributeStyleMap[margin]=margin
CustomAttributeStyleMap[padding]=padding
CustomAttributeStyleMap[border]=border
CustomAttributeStyleMap[border_color]=border-color
CustomAttributeStyleMap[border_size]=border-width
CustomAttributeStyleMap[border_style]=border-style


# Friendly name for tags, is shown in status bar and dialogs
XmlTagNameAlias[]
XmlTagNameAlias[th]=table header
XmlTagNameAlias[td]=table cell
XmlTagNameAlias[tr]=table row
XmlTagNameAlias[ul]=unordered list
XmlTagNameAlias[ol]=ordered list
XmlTagNameAlias[li]=list item


[SystemSettings]
# Use relative URLs (without host) inside the editor (only affects images in OE 5.0).
RelativeURL=enabled



[EditorLayout]
# Global editor layout (buttons and path / toolbar placment)
# Default buttons you want to use in the editor
# buttons not mentioned here aren't tested and therefore not supported together with Online Editor
# NOTE: underline and pagebreak will not appear if these custom tags are not enabled in content.ini!
Buttons[]
Buttons[]=formatselect
Buttons[]=bold
Buttons[]=italic
Buttons[]=underline
Buttons[]=|
Buttons[]=sub
Buttons[]=sup
Buttons[]=|
# To controll alignment on p|header|custom|table|td|th tags
# Only supported on eZ Publish 4.1 and higher (buttons will be hidden in 4.0.x)
Buttons[]=justifyleft
Buttons[]=justifycenter
Buttons[]=justifyright
Buttons[]=justifyfull
Buttons[]=|
Buttons[]=bullist
Buttons[]=numlist
Buttons[]=outdent
Buttons[]=indent
Buttons[]=|
Buttons[]=undo
Buttons[]=redo
Buttons[]=|
Buttons[]=link
Buttons[]=unlink
Buttons[]=anchor
Buttons[]=|
# These two needs the searchreplace plugin in order to work
#Buttons[]=search
#Buttons[]=replace
#Buttons[]=|
Buttons[]=image
Buttons[]=object
#Buttons[]=file
Buttons[]=custom
Buttons[]=literal
Buttons[]=charmap
Buttons[]=pagebreak
# Needed to be able to past content from word, to wash the syntax (might not be nedded anymore on 5.0.1) 
#Buttons[]=pasteword
# Needs the nonbreaking plugin enabled and probably also AllowMultipleSpaces set to true in ezxml.ini
#Buttons[]=nonbreaking
Buttons[]=|
# SplitButton that puts all table related buttons inside a sub menu. 
#Buttons[]=tablemenu
Buttons[]=table
Buttons[]=delete_table
Buttons[]=delete_col
#Buttons[]=col_before
Buttons[]=col_after
Buttons[]=delete_row
#Buttons[]=row_before
Buttons[]=row_after
Buttons[]=split_cells
Buttons[]=merge_cells
Buttons[]=|
# Lets you see a popup with html markup
# needs rewrite rules to allow html files in design folders if in virtualhost mode
#Buttons[]=code
# needs the visualchars plugin in order to work
#Buttons[]=visualchars
Buttons[]=fullscreen
Buttons[]=help
#Buttons[]=disable
#Buttons[]=|
#Buttons[]=publish
#Buttons[]=store
#Buttons[]=discard
# Button for TinyMCE spellchecker, remember to activate plugin first
#Buttons[]=spellchecker

# Toolbar location, possible values: top / bottom / none
ToolbarLocation=top

# Path location, possible values: top / bottom / none
PathLocation=bottom



# Example for Editor layout for mini editor
# 'mini' is taken from TagPreset defined in ezxml.ini and
# stored while editing the class on a attribute basis.
# This feature is eZ Publish 4.1 and higher only!
[EditorLayout_mini]
Buttons[]
Buttons[]=bold
Buttons[]=italic
Buttons[]=underline
Buttons[]=|
Buttons[]=undo
Buttons[]=redo
PathLocation=none



[SpellChecker]
# Settings for TinyMCE SpellChecker
# You need to enable the spellchecker plugin before these settings have any effect
# Wiki: http://wiki.moxiecode.com/index.php/TinyMCE:Plugins/spellchecker
config[]
config[general.engine]=GoogleSpell

// PSpell settings
#config[general.engine]=PSpell
#config[PSpell.spelling]=
#config[PSpell.jargon]=
#config[PSpell.encoding]=

# PSpellShell settings
#config[general.engine]=PSpellShell
#config[PSpellShell.aspell]=/usr/bin/aspell
#config[PSpellShell.tmp]=/tmp

# Windows PSpellShell settings
#config[general.engine]=PSpellShell
#config[PSpellShell.aspell]="c:\Program Files\Aspell\bin\aspell.exe"
#config[PSpellShell.tmp]=c:/temp




# Settings for the js / css packer included in OE
# The Packer lets you define custom functions that can generate CSS or JS dynamically
# Here is an example of setting up such a function:
#
#[Packer_<custom_packer>]
## Optional, uses <custom_packer> as class name if not set
#Class=MyCustomJsGeneratorClass
## Optional, uses autoload system if not defined
#File=extension/ezoe/classes/mycustomjsgenerator.php
#
# Definition of use in template:
# {ezoescript('<custom_packer>::<funtion_name>[::arg1]')}
#
# See in extension/ezoe/autoloads/ezoepackerfunctions.php for more info on how
# to set up the php part!
#
# eZOEPackerFunctions::i18n included in ezoe is used to generate translation strings
# automatically to a json format that TinyMCE can understand.


[Packer_ezoe]
Class=eZOEPackerFunctions
File=extension/ezoe/classes/ezoepackerfunctions.php

